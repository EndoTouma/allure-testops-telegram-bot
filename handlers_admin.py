import logging
import os

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from db import add_allowed_user, remove_allowed_user, list_allowed_users

logger = logging.getLogger(__name__)

# –í–∞—à Telegram username (–±–µ–∑ @), –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤—ã–¥–∞–≤–∞—Ç—å/—Å–Ω–∏–º–∞—Ç—å –¥–æ—Å—Ç—É–ø
OWNER_USERNAME = os.getenv("OWNER_USERNAME")  # <- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @


async def allow_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /allow_user <telegram_username>
    –î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ @username) –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ OWNER_USERNAME.
    """
    from_user = update.effective_user.username
    if from_user != OWNER_USERNAME:
        return

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allow_user <telegram_username>")

    raw = context.args[0].lstrip("@")
    if not raw.isalnum():
        return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã.")

    try:
        add_allowed_user(raw)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ allowed_users: {e}")
        return await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{raw} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.")


async def disallow_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /disallow_user <telegram_username>
    –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ @username) –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ OWNER_USERNAME.
    """
    from_user = update.effective_user.username
    if from_user != OWNER_USERNAME:
        return

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disallow_user <telegram_username>")

    raw = context.args[0].lstrip("@")
    if not raw.isalnum():
        return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã.")

    try:
        remove_allowed_user(raw)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ allowed_users: {e}")
        return await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{raw} —É–¥–∞–ª—ë–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.")


async def list_allowed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /list_allowed
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (@username) –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ OWNER_USERNAME.
    """
    from_user = update.effective_user.username
    if from_user != OWNER_USERNAME:
        return

    ids = list_allowed_users()
    if not ids:
        return await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")

    text = "üë• –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"‚Ä¢ @{u}" for u in ids)
    await update.message.reply_text(text)
