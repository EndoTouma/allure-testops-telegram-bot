import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from keyboards import MAIN_REPLY_KB
from db import get_user_projects, delete_project

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MAIN_REPLY_KB.
    """
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Allure TestOps.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=MAIN_REPLY_KB,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å MAIN_REPLY_KB.
    """
    help_text = (
        "‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ Job –¥–ª—è –∑–∞–ø—É—Å–∫–∞.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç.\n"
        "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã.\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.\n"
        "\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await update.message.reply_text(help_text, reply_markup=MAIN_REPLY_KB)


async def list_projects(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_projects ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ MongoDB
    —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ ¬´–£–¥–∞–ª–∏—Ç—å¬ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        docs = get_user_projects(user_id)
    except Exception as e:
        logger.error(f"MongoDB error (list_projects): {e}")
        if query:
            return await query.message.reply_text(
                "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î.", reply_markup=MAIN_REPLY_KB
            )
        else:
            return await update.message.reply_text(
                "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î.", reply_markup=MAIN_REPLY_KB
            )
    
    if not docs:
        if query:
            return await query.message.reply_text(
                "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=MAIN_REPLY_KB
            )
        else:
            return await update.message.reply_text(
                "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=MAIN_REPLY_KB
            )
    
    text = "üìÇ –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –£–¥–∞–ª–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞):\n"
    for doc in docs:
        text += f"‚Ä¢ {doc['project_name']} (ID {doc['project_id']})\n"
    
    keyboard = []
    for doc in docs:
        pid = doc["project_id"]
        name = doc["project_name"]
        keyboard.append([
            InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å \"{name}\" (ID {pid})",
                callback_data=f"delete_{pid}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        sent = await query.message.reply_text(text, reply_markup=markup)
    else:
        sent = await update.message.reply_text(text, reply_markup=markup)
    
    context.user_data["last_msg_id_with_buttons"] = sent.message_id
