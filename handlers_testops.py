import logging
import re
from typing import Any, Dict, List

from pymongo import errors as mongo_errors
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.constants import ChatAction
from telegram.ext import ContextTypes

import testops_client as toc
from db import get_user_projects, find_project, add_project, is_user_allowed, delete_project
from handlers_basic import help_command, list_projects
from jobs import check_launch_result
from keyboards import (
    build_jobs_inline,
    build_params_inline,
    MAIN_REPLY_KB,
    REPLY_MENU,
)
from testops_client import TESTOPS_URL
from utils import extract_project_id, notify_error

logger = logging.getLogger(__name__)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (InlineKeyboard) –¥–ª—è:
    - –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (run_test)
    - –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (add_project, project_<id>)
    - –≤—ã–±–æ—Ä–∞ Job –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (job_<id>_<project>, param_‚Ä¶)
    - —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (delete_<id>)
    """
    query = update.callback_query
    await query.answer()
    username = query.from_user.username
    if not username or not is_user_allowed(username):
        await query.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    
    data = query.data
    user_id = query.from_user.id
    
    try:
        # 0) –ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        if data == "help":
            help_text = (
                "‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ Job –¥–ª—è –∑–∞–ø—É—Å–∫–∞.\n"
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç.\n"
                "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã.\n"
                "‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∏–∂–µ."
            )
            await query.edit_message_text(help_text, reply_markup=MAIN_REPLY_KB)
            return
        
        # 1) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
        if data == "back_to_main":
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            try:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                )
            except Exception:
                pass
            return
        
        # 2) –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
        if data == "cancel":
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            context.user_data.clear()
            try:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                )
            except Exception:
                pass
            return
        
        # 2.1) –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if data.startswith("delete_"):
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            
            try:
                project_id = int(data.split("_", 1)[1])
            except (IndexError, ValueError):
                return await notify_error(
                    query, context, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", retry_data="list_projects"
                )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –ë–î
            try:
                deleted = delete_project(user_id, project_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {e}")
                return await query.edit_message_text(
                    "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=None
                )
            
            if not deleted:
                return await query.edit_message_text(
                    f"‚ùó –ü—Ä–æ–µ–∫—Ç ID {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
                    reply_markup=None
                )
            
            # –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            await query.edit_message_text(
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å ID {project_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n"
                f"–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫..."
            )
            return await list_projects(update, context)
        
        # 2.2) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        if data == "launch_confirm":
            # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—é–º–µ
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None
                    )
                except Exception:
                    pass
            
            # –î–æ—Å—Ç–∞–µ–º ¬´—á–µ—Ä–Ω–æ–≤–∏–∫¬ª –∑–∞–ø—É—Å–∫–∞ –∏–∑ user_data
            pending = context.user_data.pop("pending_launch", None)
            if not pending:
                return await query.edit_message_text(
                    "‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É.",
                    reply_markup=None
                )
            
            job_id = pending["job_id"]
            launch_name = pending["launch_name"]
            params_list = pending["params_list"]
            display_params = pending.get("display_params", [])
            
            loading = await query.edit_message_text("‚åõ –ó–∞–ø—É—Å–∫ Job‚Ä¶")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Job —á–µ—Ä–µ–∑ TestOps API
            try:
                run_id = await toc.run_job(job_id, launch_name, params_list)
            except toc.TestOpsError as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Job: {e}")
                return await query.edit_message_text(
                    "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Job. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=MAIN_REPLY_KB
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ–≥–æ–Ω–∞ (—Å –∏–º–µ–Ω–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            if display_params:
                params_lines = "\n".join(f"‚Ä¢ {name} = {value}" for name, value in display_params)
            else:
                params_lines = "–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
            
            run_link = f"{TESTOPS_URL}/launch/{run_id}"
            started_text = (
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ!\n"
                f"üìå –ò–º—è –∑–∞–ø—É—Å–∫–∞: <b>{launch_name}</b>\n"
                f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n<code>{params_lines}</code>\n\n"
                f"ID –ø—Ä–æ–≥–æ–Ω–∞: <b>{run_id}</b>\n"
                f"üîó <a href=\"{run_link}\">–ü–µ—Ä–µ–π—Ç–∏ –≤ Allure TestOps</a>\n\n"
                "–ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
            )
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´‚åõ –ó–∞–ø—É—Å–∫‚Ä¶¬ª –≤ ¬´‚úÖ –ó–∞–ø—É—â–µ–Ω–æ‚Ä¶¬ª
            await context.bot.edit_message_text(
                text=started_text,
                chat_id=loading.chat_id,
                message_id=loading.message_id,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            context.job_queue.run_repeating(
                check_launch_result,
                interval=30,
                first=30,
                data={
                    "chat_id": loading.chat_id,
                    "loading_message_id": loading.message_id,
                    "launch_id": run_id,
                },
                name=f"check_launch_{run_id}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–µ–π—Å—Ç–≤–∏–π
            await update.callback_query.message.reply_text(
                "–î–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=REPLY_MENU
            )
            
            context.user_data.clear()
            return
        
        # 2.3) –û—Ç–º–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞
        if data == "launch_cancel":
            # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—é–º–µ
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None
                    )
                except Exception:
                    pass
            
            # –£–¥–∞–ª—è–µ–º ¬´—á–µ—Ä–Ω–æ–≤–∏–∫¬ª –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            context.user_data.pop("pending_launch", None)
            
            await query.edit_message_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=MAIN_REPLY_KB
            )
            return
        
        # 3) –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç (–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤)
        if data == "run_test":
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None
                    )
                except Exception:
                    pass
            
            try:
                docs = get_user_projects(user_id)
            except Exception as e:
                logger.error(f"MongoDB error (run_test): {e}")
                return await notify_error(
                    query, context, "–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.", retry_data="run_test"
                )
            
            if not docs:
                text = (
                    "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.\n"
                    "–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç."
                )
                buttons = InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
                    ]
                )
                return await query.edit_message_text(text, parse_mode="HTML", reply_markup=buttons)
            
            keyboard = []
            for doc in docs:
                pid = doc["project_id"]
                name = doc["project_name"]
                keyboard.append(
                    [InlineKeyboardButton(f"{name} (ID {pid})", callback_data=f"project_{pid}")]
                )
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
            markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÇ –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=markup
            )
            context.user_data["last_msg_id_with_buttons"] = query.message.message_id
            return
        
        # 4) –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        if data == "add_project":
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            
            cancel_markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
            )
            
            await query.edit_message_text(
                "üìÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –≤ Allure TestOps:\n",
                parse_mode="HTML",
                reply_markup=cancel_markup,
            )
            context.user_data.clear()
            context.user_data["adding_project"] = True
            return
        
        # 5) –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ ID
        if data.startswith("project_"):
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            
            try:
                project_id = int(data.split("_", 1)[1])
            except (IndexError, ValueError):
                return await notify_error(
                    query, context, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.", retry_data="run_test"
                )
            
            proj_doc = find_project(user_id, project_id)
            if not proj_doc:
                return await notify_error(
                    query, context, "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", retry_data="run_test"
                )
            project_name = proj_doc["project_name"]
            
            await query.edit_message_text(
                f"‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ Job‚Äô–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ¬´{project_name}¬ª‚Ä¶"
            )
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, action=ChatAction.TYPING
            )
            try:
                jobs = await toc.get_jobs_list(project_id)
            except toc.TestOpsError as e:
                logger.error(f"Error getting jobs list: {e}")
                return await notify_error(
                    query,
                    context,
                    "–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Job‚Äô–æ–≤.",
                    retry_data=f"project_{project_id}",
                )
            
            if not jobs:
                return await query.edit_message_text(
                    f"‚ùó –£ –ø—Ä–æ–µ–∫—Ç–∞ ¬´{project_name}¬ª –Ω–µ—Ç Job‚Äô–æ–≤.", reply_markup=None
                )
            
            context.user_data["current_project_id"] = project_id
            context.user_data["current_project_name"] = project_name
            
            await query.edit_message_text(
                f"üìã Job‚Äô—ã –ø—Ä–æ–µ–∫—Ç–∞ ¬´{project_name}¬ª:",
                reply_markup=build_jobs_inline(jobs, project_id),
            )
            context.user_data["last_msg_id_with_buttons"] = query.message.message_id
            return
        
        # 6) –í—ã–±—Ä–∞—Ç—å Job
        if data.startswith("job_"):
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            
            parts = data.split("_")
            if len(parts) != 3:
                return await notify_error(
                    query, context, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.", retry_data="run_test"
                )
            _, job_id_str, project_id_str = parts
            try:
                job_id = int(job_id_str)
                project_id = int(project_id_str)
            except ValueError:
                return await notify_error(
                    query, context, "–ù–µ–≤–µ—Ä–Ω—ã–π ID Job.", retry_data="run_test"
                )
            
            context.user_data["current_job_id"] = job_id
            context.user_data["current_project_id"] = project_id
            context.user_data["collected_params"] = {}
            
            await query.edit_message_text("‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π Job‚Ä¶")
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, action=ChatAction.TYPING
            )
            try:
                job_obj = await toc.get_job_details(job_id)
            except toc.TestOpsError as e:
                logger.error(f"Error getting job details: {e}")
                return await notify_error(
                    query,
                    context,
                    "–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π Job.",
                    retry_data=f"job_{job_id}_{project_id}",
                )
            
            params = job_obj.get("parameters", [])
            context.user_data["current_job_name"] = job_obj.get(
                "name", f"Job {job_id}"
            )
            context.user_data["current_params"] = params
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äì —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –∏–º—è –∑–∞–ø—É—Å–∫–∞
            if not params:
                context.user_data["awaiting_launch_name"] = True
                context.user_data["awaiting_launch_job"] = job_id
                context.user_data["awaiting_launch_project"] = project_id
                return await query.edit_message_text(
                    "–£ —ç—Ç–æ–≥–æ Job –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∑–∞–ø—É—Å–∫–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):"
                )
            
            # –ò–Ω–∞—á–µ ‚Äì —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            header, markup = build_params_inline(params, {}, project_id, job_id)
            sent = await query.edit_message_text(header, reply_markup=markup)
            context.user_data["last_msg_id_with_buttons"] = sent.message_id
            return
        
        # 7) –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ –∫–Ω–æ–ø–∫–µ)
        if data.startswith("param_"):
            last_buttons = context.user_data.pop("last_msg_id_with_buttons", None)
            if last_buttons:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=query.message.chat_id,
                        message_id=last_buttons,
                        reply_markup=None,
                    )
                except Exception:
                    pass
            
            parts = data.split("_", 4)
            if len(parts) != 5:
                return await notify_error(
                    query, context, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.", retry_data="run_test"
                )
            _, key, raw_value, job_id_str, project_id_str = parts
            
            try:
                job_id = int(job_id_str)
                project_id = int(project_id_str)
            except ValueError:
                return await notify_error(
                    query, context, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ.", retry_data="run_test"
                )
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ text_message_handler
            if raw_value == "INPUT":
                context.user_data["awaiting_param_key"] = key
                context.user_data["awaiting_param_job"] = job_id
                context.user_data["awaiting_param_project"] = project_id
                return await query.edit_message_text(
                    f"‚ùó –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ¬´{key}¬ª:"
                )
            
            params: List[Dict] = context.user_data.get("current_params", [])
            collected: Dict[str, Any] = context.user_data.setdefault(
                "collected_params", {}
            )
            
            if raw_value == "SKIP":
                pass
            else:
                collected[key] = raw_value
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            next_param = None
            for p in params:
                if p.get("name") not in collected:
                    next_param = p
                    break
            
            if not next_param:
                context.user_data["awaiting_launch_name"] = True
                context.user_data["awaiting_launch_job"] = job_id
                context.user_data["awaiting_launch_project"] = project_id
                return await query.edit_message_text(
                    "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã.\n\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∑–∞–ø—É—Å–∫–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):"
                )
            
            header, markup = build_params_inline(params, collected, project_id, job_id)
            sent = await query.edit_message_text(header, reply_markup=markup)
            context.user_data["last_msg_id_with_buttons"] = sent.message_id
            return
        
        return await notify_error(query, context, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", retry_data="run_test")
    
    except Exception as exc:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ button_handler: {exc}")
        try:
            await notify_error(
                update_or_query=query, context=context, message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", retry_data="run_test"
            )
        except:
            pass


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è:
    - ¬´‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç¬ª –∏ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç¬ª (–∏–º–∏—Ç–∏—Ä—É–µ—Ç CallbackQuery)
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–ª–∞–≥ adding_project)
    - –í–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (awaiting_param_key)
    - –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ (awaiting_launch_name)
    - –¢–µ–∫—Å—Ç ¬´–ú–µ–Ω—é¬ª –∏ ¬´–û—Ç–º–µ–Ω–∞¬ª
    """
    username = update.effective_user.username
    if not username or not is_user_allowed(username):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
        return
    text = update.message.text.strip()
    user_data = context.user_data
    user_id = update.effective_user.id
    
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )
    
    try:
        normalized = text.lower()
        
        # 0) ¬´‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç¬ª
        if normalized in ("‚ñ∂Ô∏è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", "‚û§ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", "–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç"):
            class FakeQuery:
                def __init__(self, message, user):
                    self.data = "run_test"
                    self.message = message
                    self.from_user = user
                
                async def answer(self, *args, **kwargs):
                    return
                
                async def edit_message_text(self, *args, **kwargs):
                    return await self.message.reply_text(*args, **kwargs)
            
            class FakeUpdate:
                def __init__(self, fake_query, message):
                    self.callback_query = fake_query
                    self.effective_chat = message.chat
                    self.effective_user = message.from_user
            
            fake_query = FakeQuery(update.message, update.effective_user)
            fake_update = FakeUpdate(fake_query, update.message)
            return await button_handler(fake_update, context)
        
        # 0.1) ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç¬ª
        if normalized in ("‚ûï –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"):
            class FakeQuery:
                def __init__(self, message, user):
                    self.data = "add_project"
                    self.message = message
                    self.from_user = user
                
                async def answer(self, *args, **kwargs):
                    return
                
                async def edit_message_text(self, *args, **kwargs):
                    return await self.message.reply_text(*args, **kwargs)
            
            class FakeUpdate:
                def __init__(self, fake_query, message):
                    self.callback_query = fake_query
                    self.effective_chat = message.chat
                    self.effective_user = message.from_user
            
            fake_query = FakeQuery(update.message, update.effective_user)
            fake_update = FakeUpdate(fake_query, update.message)
            return await button_handler(fake_update, context)
        
        # 0.2) ¬´üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤¬ª
        if normalized in ("üìÇ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"):
            return await list_projects(update, context)
        
        # 0.3) ¬´‚ÑπÔ∏è –ü–æ–º–æ—â—å¬ª
        if normalized in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "/help"):
            return await help_command(update, context)
        
        # 1) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏)
        if user_data.get("adding_project"):
            pid = extract_project_id(text)
            if pid is None:
                return await update.message.reply_text(
                    "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ AllureTestOps",
                    parse_mode="HTML",
                    reply_markup=ReplyKeyboardRemove(),
                )
            existing = find_project(user_id, pid)
            if existing:
                user_data.pop("adding_project", None)
                return await update.message.reply_text(
                    f"‚ùó –ü—Ä–æ–µ–∫—Ç ID {pid} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=MAIN_REPLY_KB
                )
            try:
                project_name = await toc.get_project_name(pid)
            except toc.TestOpsError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç {pid}: {e}")
                user_data.pop("adding_project", None)
                return await update.message.reply_text(
                    f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (ID {pid}).",
                    reply_markup=MAIN_REPLY_KB,
                )
            try:
                add_project(user_id, pid, project_name)
            except mongo_errors.DuplicateKeyError:
                user_data.pop("adding_project", None)
                return await update.message.reply_text(
                    f"‚ùó –ü—Ä–æ–µ–∫—Ç ID {pid} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=MAIN_REPLY_KB
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ MongoDB: {e}")
                user_data.pop("adding_project", None)
                return await update.message.reply_text(
                    "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑—É.", reply_markup=MAIN_REPLY_KB
                )
            user_data.pop("adding_project", None)
            return await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç ¬´{project_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=MAIN_REPLY_KB
            )
        
        # 2) –í–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if user_data.get("awaiting_param_key"):
            key = user_data.pop("awaiting_param_key")
            job_id = user_data.pop("awaiting_param_job", None)
            project_id = user_data.pop("awaiting_param_project", None)
            if job_id is None or project_id is None:
                return await notify_error(
                    update, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.", retry_data="run_test"
                )
            collected = user_data.setdefault("collected_params", {})
            collected[key] = text
            
            params: List[Dict] = user_data.get("current_params", [])
            next_param = None
            for p in params:
                if p.get("name") not in collected:
                    next_param = p
                    break
            if not next_param:
                user_data["awaiting_launch_name"] = True
                user_data["awaiting_launch_job"] = job_id
                user_data["awaiting_launch_project"] = project_id
                return await update.message.reply_text(
                    "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã.\n\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∑–∞–ø—É—Å–∫–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):",
                    reply_markup=ReplyKeyboardRemove(),
                )
            
            header, markup = build_params_inline(
                params, collected, project_id, job_id
            )
            sent = await update.message.reply_text(header, reply_markup=markup)
            user_data["last_msg_id_with_buttons"] = sent.message_id
            return
        
        # 3) –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
        if user_data.get("awaiting_launch_name"):
            raw_name = text
            job_id = user_data.pop("awaiting_launch_job", None)
            project_id = user_data.pop("awaiting_launch_project", None)
            user_data.pop("awaiting_launch_name", None)
            
            if job_id is None or project_id is None:
                return await notify_error(
                    update, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏.", retry_data="run_test"
                )
            
            if not re.match(r"^[\w\-\s]{1,100}$", raw_name):
                return await update.message.reply_text(
                    "‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.",
                    reply_markup=MAIN_REPLY_KB,
                )
            
            launch_name = raw_name
            collected = user_data.get("collected_params", {})
            params_meta: List[Dict] = user_data.get("current_params", [])
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è TestOps API
            params_list = [
                {"id": p["id"], "value": collected[p["name"]]}
                for p in params_meta
                if p["name"] in collected
            ]
            # –°–æ–±–∏—Ä–∞–µ–º ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ¬ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–º—è ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ)
            display_params = [
                (p["name"], collected[p["name"]])
                for p in params_meta
                if p["name"] in collected
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´—á–µ—Ä–Ω–æ–≤–∏–∫¬ª –∑–∞–ø—É—Å–∫–∞ –≤ user_data, –≤–∫–ª—é—á–∞—è display_params
            user_data["pending_launch"] = {
                "job_id": job_id,
                "project_id": project_id,
                "launch_name": launch_name,
                "params_list": params_list,
                "display_params": display_params,
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            if collected:
                params_lines = "\n".join(f"‚Ä¢ {k} = {v}" for k, v in collected.items())
            else:
                params_lines = "–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
            
            confirmation_text = (
                f"üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:</b>\n\n"
                f"üìå <b>–ò–º—è –∑–∞–ø—É—Å–∫–∞:</b> {launch_name}\n"
                f"üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n<code>{params_lines}</code>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ¬´‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å¬ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            
            confirm_keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="launch_confirm")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="launch_cancel")],
                ]
            )
            
            sent = await update.message.reply_text(
                confirmation_text,
                parse_mode="HTML",
                reply_markup=confirm_keyboard
            )
            user_data["last_msg_id_with_buttons"] = sent.message_id
            return
        
        # 4) –¢–µ–∫—Å—Ç ¬´–û—Ç–º–µ–Ω–∞¬ª
        if normalized == "–æ—Ç–º–µ–Ω–∞":
            user_data.clear()
            return await update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_REPLY_KB
            )
        
        # 5) –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await update.message.reply_text(
            "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=MAIN_REPLY_KB,
        )
    
    except Exception as exc:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ text_message_handler: {exc}")
        return await notify_error(update, context, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", retry_data="run_test")
