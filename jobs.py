import logging

from telegram import ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

import testops_client as toc
import time
from keyboards import REPLY_MENU

logger = logging.getLogger(__name__)


async def check_launch_result(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ–≥–æ–Ω (launch) –∏, –µ—Å–ª–∏ –¥–∞,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª, –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
    """
    job_data = context.job.data
    attempt = job_data.get("attempt", 1)
    chat_id = job_data["chat_id"]
    loading_message_id = job_data["loading_message_id"]
    launch_id = job_data["launch_id"]
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ)
    start_ts = job_data.get("start_ts")
    if start_ts is None:
        start_ts = time.time()
        context.job.data["start_ts"] = start_ts
    
    # –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    max_duration_sec = 12 * 3600  # 12 —á–∞—Å–æ–≤
    
    elapsed = time.time() - start_ts
    if elapsed > max_duration_sec:
        logger.warning(
            f"check_launch_result: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è launch {launch_id} ({elapsed / 3600:.1f} —á), —É–¥–∞–ª—è—é –∑–∞–¥–∞—á—É.")
        context.job.schedule_removal()
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ Allure TestOps.",
            reply_markup=REPLY_MENU,
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º launch_info
    try:
        launch_info = await toc.get_launch_info(launch_id)
    except toc.TestOpsError as e:
        logger.error(f"check_launch_result: –æ—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {launch_id}: {e}")
        return
    
    # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç ‚Äî –∂–¥—ë–º –¥–∞–ª—å—à–µ
    if not launch_info.get("closed", False):
        return
    
    # –ü—Ä–æ–≥–æ–Ω –∑–∞–∫—Ä—ã—Ç ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        stats = await toc.get_launch_statistic(launch_id)
    except toc.TestOpsError as e:
        logger.error(f"check_launch_result: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {launch_id}: {e}")
        stats = []
    
    passed_count = sum(
        item["count"] for item in stats if item.get("status", "").upper() == "PASSED"
    )
    failed_count = sum(
        item["count"] for item in stats if item.get("status", "").upper() == "FAILED"
    )
    skipped_count = sum(
        item["count"]
        for item in stats
        if item.get("status", "").upper() not in ("PASSED", "FAILED")
    )
    total_count = passed_count + failed_count + skipped_count
    
    stats_text = (
        f"üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: <b>{total_count}</b>\n"
        f"üü¢ Passed: <b>{passed_count}</b>\n"
        f"üî¥ Failed: <b>{failed_count}</b>\n"
        f"‚ö™ Skipped: <b>{skipped_count}</b>"
    )
    
    run_link = f"{toc.TESTOPS_URL}/launch/{launch_id}"
    final_text = (
        f"‚úÖ –ü—Ä–æ–≥–æ–Ω <b>ID {launch_id}</b> –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{stats_text}\n\n"
        f"üîó <a href=\"{run_link}\">–ü–µ—Ä–µ–π—Ç–∏ –≤ Allure TestOps</a>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=final_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_to_message_id=loading_message_id,
            reply_markup=ReplyKeyboardRemove(),
        )
    except Exception as e:
        logger.error(f"check_launch_result: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º ¬´–ú–µ–Ω—é¬ª
    await context.bot.send_message(
        chat_id=chat_id,
        text="–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª:",
        reply_markup=REPLY_MENU,
    )
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    context.job.schedule_removal()
