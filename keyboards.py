from typing import Any, Dict, List, Optional, Tuple

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

# --------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä ---------------------
MAIN_REPLY_KB = ReplyKeyboardMarkup(
    [
        ["‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"],
        ["üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)

REPLY_MENU = ReplyKeyboardMarkup(
    [["–ú–µ–Ω—é"]],
    one_time_keyboard=True,
    resize_keyboard=True,
)


# --------------------- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä ---------------------
def build_projects_inline(projects: List[Dict]) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    for doc in projects:
        pid = doc["project_id"]
        name = doc["project_name"]
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"{name} (ID {pid})", callback_data=f"project_{pid}"
                )
            ]
        )
    keyboard.append(
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")]
    )
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def build_jobs_inline(jobs: List[Dict], project_id: int) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    for job in jobs:
        jid = job.get("id")
        jname = job.get("name", f"Job {jid}")
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"{jname} (ID {jid})", callback_data=f"job_{jid}_{project_id}"
                )
            ]
        )
    keyboard.append(
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="run_test")]
    )
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def build_params_inline(
        params: List[Dict],
        collected: Dict[str, Any],
        project_id: int,
        job_id: int,
) -> Tuple[str, Optional[InlineKeyboardMarkup]]:
    next_param = None
    for p in params:
        key = p.get("name")
        if key not in collected:
            next_param = p
            break
    
    lines = [f"‚Ä¢ {k} = {v}" for k, v in collected.items()]
    chosen_text = "\n".join(lines) if lines else "‚Ä¢ (–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
    
    if not next_param:
        header = (
            f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã:\n{chosen_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∑–∞–ø—É—Å–∫–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        return header, None
    
    key = next_param.get("name", "")
    default = next_param.get("defaultValue", "")
    
    header = (
        f"üìã –ó–∞–ø–æ–ª–Ω–µ–Ω–æ:\n{chosen_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{key}¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:\n"
        f"‚Ä¢ ¬´‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default})¬ª\n"
        f"‚Ä¢ ¬´‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ¬ª\n"
    )
    buttons = [
        [
            InlineKeyboardButton(
                f"‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default})",
                callback_data=f"param_{key}_{default}_{job_id}_{project_id}",
            )
        ],
        [
            InlineKeyboardButton(
                f"‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ",
                callback_data=f"param_{key}_INPUT_{job_id}_{project_id}",
            )
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="run_test")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    return header, InlineKeyboardMarkup(buttons)
