import re
from typing import Any, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ URL –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ID_REGEX = re.compile(r"/?(\d+)")

async def notify_error(
    update_or_query: Any,
    context: ContextTypes.DEFAULT_TYPE,
    message: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å?",
    retry_data: Optional[str] = None,
):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª (–µ—Å–ª–∏ retry_data –∑–∞–¥–∞–Ω) –∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.
    –ï—Å–ª–∏ update_or_query ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π Update (—Ç–æ –µ—Å—Ç—å –∏–∑ text_message_handler), –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    buttons = []
    if retry_data:
        buttons.append([InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=retry_data)])
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    markup = InlineKeyboardMarkup(buttons)

    if isinstance(update_or_query, Update) and update_or_query.message:
        await update_or_query.message.reply_text(message, reply_markup=markup)
    else:
        await update_or_query.edit_message_text(message, reply_markup=markup)


async def remove_reply_keyboard(update: Update):
    """
    –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ReplyKeyboard (ReplyKeyboardRemove).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —á–∞—Ç–∞.
    """
    await update.message.reply_text("", reply_markup=ReplyKeyboardRemove())


def extract_project_id(text: str) -> Optional[int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ https://.../projects/123 –∏–ª–∏ /projects/123 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 123 (int).
    –ï—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    match = PROJECT_ID_REGEX.search(text)
    if not match:
        return None
    try:
        return int(match.group(1))
    except ValueError:
        return None